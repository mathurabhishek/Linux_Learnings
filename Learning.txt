Advanced Linux


What is kernel?
	Kernel is just another program with name vmlinuz-<kernelversion>
	Kernel, like any other program, accepts command line paramaters.
	These parameters are provided to the kernel by the bootloader,
	GRUB

How to interact with kernel ?

APIs
	APIs provided by kernel are called System Calls. These are the functions which can be called from
	user space into the kernel.

FileSystems
	proc, sys,debugfs, devicefiles to interact with devices

What does kernel do?
	Gatekeeper. Enforces privelages.
	Root processes - all privelages. Some CPU instructions can only be executed by linux kernel
	Security Policies. Controls access to hardware.

About kernel
	small size. boots to user space. additional functionality can be loaded from user space.kernel program
	is located in /boot

System Calls
	1.	System calls are functions implemented by the Linux kernel which are meant to be called from the
		user space. List of system calls is available in include/uapi/asm-generic/unistd.h in kernel source.
	2.	Number of system calls varies from architecture to architecture
		and with kernel versions. 
	3.	System calls are documented in man section 2.
	4.	System call wrappers are implemneted in standard library(libc). Standard C library (invokes the system call based on the
		architecture. So User_space -> Standard C Library ( architecture dependant0 -> Linux_Kernel
	5	If the system call fails then the kernel will return let's say -10 to the library function call. The library function call
		will then return -1 to the user space calling function and will the global 'errno' vraible value to 10.
	6.	Remember that errno could have stale value if the call is successful. So check for errno only whne you get a -1 return value from
		the system call made through standard C library
	7.	Man pages describe the system call from the standard C library perspective, so for 'read' you'll find a single
		description in man pages but in the unistd.h header file , you'll see multiple definitions depending upon the architecture
	8.	To read man page of system calls use : man system_call 2 ( remmeber 2 is for system calls. 1 is for coammands).
		So 'man kill 1' is for 'kill' command

Linux Kernel Messages
	1.	printk is used for printing deubug messages
	2.	with dmesg, we read the messages from RAM buffer
	3	journalctl is the one which could be used to see historic messages on the disk

/proc
	1.	/proc is a virtual filesystem.So it's not there on the disk. proc stands for processes It provides runtime interaction with the kernel.
	2. 	/proc can be used to have tunable variables in the kernel
	3.	When a proc file is opened with cat, it actually makes a function call in the kernel and shows the returned data
	4.	As it can now be understood easily, proc data is not persistent.
	5.	Each process has a corresponding PID directory
	6. 	PID directory has process details like memory, program, files etc.
	7.	Each process has atleast 1 thread. Threads are listed as tasks.

/sys
	1.	/sys file systems lists the hardware hierarchy as a file system representation
	2.	It lists the information of the kernel modules
	3.	Commands like lspci lists the pci devices by going through the /sysfs
	4.	As new devices or hardware gets plugged in, new entries will emerge under sys file system
	5.	The ko files are the data structures containing info of the kernel module to be linked with the kernel 

/dev
	1.	/dev is dynamically created these days
	2.	has all the driver files

 


BOOTING

	1.	Starts iwth self-test. Control is then passed to BIOS. BIOS then loads the bootloader - GRUB
	2.	GRUB loads kernel. Before that it might need to load some part of itself. It can mount initial file system ( a very basic one)
	3.	You can interact with Grub. Tell it which kernel version to load etc.You can also configure it to load kernel from network.
	4.	/etc/defualt/grub - soem info. /etc/grub.d -> used by grub to generate the config menu with which you want to boot.
	5.	The files in /etc/grub.d are used in sequence to generate the config menu
	6.	Custom changes can be added under 40_custom and 41_custom.
	7.	Run grub2-mkconfig to generate new config file
	8. 	Kernel source tree has Documentation directory. Documentation/kernel-parameters.txt which lists parameters that can be passed to
		kernel while booting up.
BOOTING2
	1. 	Initrd - Initial ramdisk
	2. 	first process init from initrd /usr/sbin/init
	3.	Init could be poiniting to systemd
	4.	Systemd are user space






